#ifndef EFF_CORR_H_GUARD
#define EFF_CORR_H_GUARD
#include "constants.hpp"
class EffCorr
{
protected:
    // Online C++ compiler to run C++ program online
    static const int MOM_BIN_SIZE_CD_P = 7;
    static const int MOM_BIN_SIZE_FDL_P = 9;
    static const int MOM_BIN_SIZE_FDH_P = 10;

    static const int MOM_BIN_SIZE_CD_PIP = 11;
    static const int MOM_BIN_SIZE_FDL_PIP = 9;
    static const int MOM_BIN_SIZE_FDH_PIP = 10;

    static const int MOM_BIN_SIZE_CD_PIM = 12;
    static const int MOM_BIN_SIZE_FDL_PIM = 7;
    static const int MOM_BIN_SIZE_FDH_PIM = 9;

    static const int CD_SEC = 3;
    static const int FD_SEC = 6;

    const float cd_phi_bin_ranges[CD_SEC + 1] = {0, 120, 240, 360};
    const float fd_phi_bin_ranges[FD_SEC + 1] = {0, 60, 120, 180, 240, 300, 360};

    const float mom_bin_ranges_prot_cd[MOM_BIN_SIZE_CD_P] = {0.4, 0.6, 0.8, 1.0, 1.2, 1.5, 10.0}; // 2.2};

    // new binning after mapping measured and missing particles
    const float mom_bin_ranges_prot_cd1[MOM_BIN_SIZE_CD_P] = {0.4, 0.55, 0.75, 0.95, 1.1, 1.35, 10.0}; // 2.2};

    // const float mom_high_vals_prot_cd[MOM_BIN_SIZE_CD_P] = {0.6, 0.8, 1.0, 1.2, 1.5, 2.2};
    const float mom_bin_ranges_prot_fdl[MOM_BIN_SIZE_FDL_P] = {0.4, 0.8, 1.1, 1.4, 1.7, 2.0, 2.5, 3.0, 10.0};       // 4.0};
    const float mom_bin_ranges_prot_fdh[MOM_BIN_SIZE_FDH_P] = {0.4, 0.8, 1.1, 1.3, 1.5, 1.75, 2.0, 2.4, 3.0, 10.0}; // 4.0};

    const float mom_bin_ranges_pip_cd[MOM_BIN_SIZE_CD_PIP] = {0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 10.0}; // 1.7};
    // new binning after mapping measured and missing particles
    const float mom_bin_ranges_pip_cd1[MOM_BIN_SIZE_CD_PIP] = {0.2, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 10.0}; // 1.7};

    const float mom_bin_ranges_pip_fdl[MOM_BIN_SIZE_FDL_PIP] = {0.3, 0.75, 1.1, 1.4, 1.7, 2.0, 2.3, 3.0, 10.0};      // 4.5};
    const float mom_bin_ranges_pip_fdh[MOM_BIN_SIZE_FDH_PIP] = {0, 0.4, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 10.0}; // 4.0};

    const float mom_bin_ranges_pim_cd[MOM_BIN_SIZE_CD_PIM] = {0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.4, 10.0}; // 1.9};
    const float mom_bin_ranges_pim_fdl[MOM_BIN_SIZE_FDL_PIM] = {0, 1.0, 1.5, 1.8, 2.3, 3.0, 10.0};                          // 5.0};
    const float mom_bin_ranges_pim_fdh[MOM_BIN_SIZE_FDH_PIM] = {0.4, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 10.0};           // 4.0};

    //// a, b ,c for ax2 + bx+c
    const float CDProtMap[3][3] = {{0.03058, -0.03232, 0.9097}, {-0.006657, 0.04666, 0.923}, {-0.04977, 0.1859, 0.8486}};

    const float FDProtMap[2][6][3] = {{{-0.00586, 0.0352, 0.937}, {-0.004665, 0.02983, 0.942}, {-0.005177, 0.03284, 0.9365}, {-0.00575, 0.0364, 0.9307}, {-0.002958, 0.02368, 0.941}, {-0.004536, 0.03079, 0.9355}},
                                      {{-0.004494, 0.03354, 0.936}, {-0.00392, 0.0302, 0.943}, {-0.004116, 0.0316, 0.9395}, {-0.003742, 0.02985, 0.941}, {-0.00464, 0.03653, 0.9277}, {-0.00408, 0.0339, 0.93}}};

    const float CDProtCoef[3][3] = {{0.1521, -0.491, 1.099}, {-0.2908, 0.5444, 0.544}, {-0.01608, -0.2275, 1.103}};

    const float FDProtCoef[2][6][3] = {{{-0.02939, 0.1786, 0.749},
                                        {-0.0008607, 0.05728, 0.7886},
                                        {0.02597, -0.0746, 0.89},
                                        {-0.0411, 0.1836, 0.7617},
                                        {-0.08356, 0.4292, 0.499},
                                        {-0.0847, 0.452, 0.5205}},
                                       {{-0.02246, 0.175, 0.6704},
                                        {-0.01881, 0.1464, 0.7036},
                                        {-0.02818, 0.10016, 0.7573},
                                        {0.02773, -0.11017, 0.9688},
                                        {-0.01888, 0.1377, 0.664},
                                        {-0.025, 0.1908, 0.5786}}};

    const float CDPipMap[3][3] = {{-0.07196, 0.1875, 0.8105}, {-0.1076, 0.257, 0.8354}, {-0.1287, 0.3435, 0.7886}};

    const float FDPipMap[2][6][3] = {{{-0.005203, 0.03497, 0.936}, {-0.005554, 0.03714, 0.933}, {-0.004215, 0.02968, 0.943}, {-0.00423, 0.02934, 0.9424}, {-0.005276, 0.0356, 0.9336}, {-0.00605, 0.04062, 0.9277}},
                                     {{-0.0111, 0.06122, 0.912}, {-0.00846, 0.04904, 0.927}, {-0.00838, 0.04797, 0.929}, {-0.00746, 0.04297, 0.935}, {-0.0117, 0.06525, 0.908}, {-0.01232, 0.0687, 0.9023}}};

    const float CDPipCoef[3][3] = {{-0.1808, 0.3374, 0.4165}, {-0.1175, 0.1235, 0.6284}, {-0.2532, 0.4685, 0.4526}};

    const float FDPipCoef[2][6][4] = {{{0.07623, -0.4763, 0.838, 0.51}, {0.07965, -0.525, 1.018, 0.3623}, {0.06573, -0.4104, 0.7295, 0.557}, {0.0881, -0.5513, 0.9644, 0.5176}, {0.0917, -0.5625, 0.9844, 0.3782}, {0.07385, -0.4944, 0.97, 0.3555}},
                                      {{-0.02975, 0.1595, -0.2341, 0.958}, {-0.08356, 0.4993, -0.84, 1.184}, {-0.1122, 0.6924, -1.219, 1.375}, {-0.02573, 0.1323, -0.22, 1.068}, {-0.003418, -0.05032, 0.2766, 0.5947}, {-0.0771, 0.402, -0.512, 0.955}}};

    const float CDPimMap[3][3] = {{-0.05908, 0.2207, 0.836}, {-0.05676, 0.2103, 0.8643}, {-0.0297, 0.1312, 0.871}};

    const float FDPimMap[2][6][3] = {{{-0.0046, 0.03085, 0.9434}, {-0.002153, 0.01659, 0.962}, {-0.004566, 0.0297, 0.9473}, {-0.003502, 0.02592, 0.9463}, {-0.005302, 0.0353, 0.9365}, {0.001083, -0.000629, 0.979}},
                                     {{-0.00561, 0.03214, 0.9453}, {-0.00413, 0.02705, 0.95}, {-0.006153, 0.0364, 0.941}, {-0.005737, 0.03595, 0.937}, {-0.00814, 0.04623, 0.927}, {-0.00533, 0.0333, 0.939}}};

    const float CDPimCoef[3][3] = {{-0.1552, 0.2737, 0.5806}, {-0.1747, 0.304, 0.685}, {-0.1921, 0.4153, 0.5264}};

    const float FDPimCoef[2][6][3] = {{{0.0882, -0.3838, 1.343}, {-0.003717, 0.03836, 0.9604}, {0.05292, -0.302, 1.394}, {0.001835, -0.003412, 0.9927}, {-0.05582, 0.3032, 0.5835}, {-0.006298, 0.134, 0.6426}},
                                      {{0.01706, 0.0002025, 0.9}, {-0.004234, 0.05035, 0.888}, {0.02156, -0.02966, 0.9507}, {0.0792, -0.2698, 1.149}, {0.01045, 0.005676, 0.904}, {0.04236, -0.1069, 0.9854}}};

    ///////////// Discrit and bin by bin method

    // const float eff_corr_val_prot_40_180[MOM_BIN_SIZE_CD_P - 1][CD_SEC] = {
    //     {0.842, 0.680, 0.881},
    //     {0.864, 0.671, 0.894},
    //     {0.798, 0.689, 0.736},
    //     {0.903, 0.645, 0.764},
    //     {0.864, 0.593, 0.742},
    //     {0.909, 0.595, 0.634}};

    // const float eff_corr_val_prot_0_20[MOM_BIN_SIZE_FDL_P - 1][FD_SEC] = {
    //     {0.8099, 0.8003, 0.8165, 0.8448, 0.6639, 0.7081},
    //     {0.9672, 0.9220, 0.9139, 0.9907, 0.9357, 0.9955},
    //     {0.9103, 0.8238, 0.8294, 0.8826, 0.9351, 0.9219},
    //     {0.9381, 0.8140, 0.8255, 0.8869, 0.9055, 0.9838},
    //     {0.9232, 0.8829, 0.8154, 0.9222, 0.9684, 1.0275},
    //     {1.0902, 0.9854, 0.8572, 0.9698, 1.0487, 1.1317},
    //     {0.9694, 0.9157, 0.8903, 1.0592, 1.0700, 1.1425},
    //     {1.0244, 0.9768, 0.9463, 0.8570, 0.9734, 1.0566}};

    // const float eff_corr_val_prot_20_40[MOM_BIN_SIZE_FDH_P - 1][FD_SEC] = {
    //     {0.691, 0.784, 0.831, 0.913, 0.704, 0.636},
    //     {0.897, 0.868, 0.842, 0.903, 0.799, 0.770},
    //     {0.879, 0.838, 0.842, 0.905, 0.842, 0.796},
    //     {0.895, 0.846, 0.808, 0.834, 0.822, 0.846},
    //     {0.890, 0.883, 0.769, 0.825, 0.843, 0.817},
    //     {0.888, 0.853, 0.837, 0.850, 0.853, 0.820},
    //     {0.914, 0.978, 0.881, 0.891, 0.830, 0.843},
    //     {0.972, 1.005, 0.893, 0.896, 0.906, 0.908},
    //     {1.024, 0.964, 0.727, 0.910, 0.922, 0.953}};

    // const float eff_corr_val_pip_40_180[MOM_BIN_SIZE_CD_PIP - 1][CD_SEC] = {
    //     {0.61, 0.60, 0.44},
    //     {0.60, 0.59, 0.46},
    //     {0.60, 0.61, 0.48},
    //     {0.64, 0.64, 0.52},
    //     {0.69, 0.70, 0.58},
    //     {0.70, 0.74, 0.62},
    //     {0.73, 0.77, 0.65},
    //     {0.79, 0.76, 0.67},
    //     {0.69, 0.75, 0.65},
    //     {0.79, 0.70, 0.73}};
    // const float eff_corr_val_pip_0_20[MOM_BIN_SIZE_FDL_PIP - 1][FD_SEC] = {
    //     {0.562, 0.518, 0.524, 0.602, 0.475, 0.485},
    //     {0.925, 0.861, 0.900, 0.942, 0.848, 0.853},
    //     {1.090, 1.222, 1.115, 1.101, 1.083, 1.115},
    //     {1.069, 1.152, 1.047, 1.111, 0.972, 1.128},
    //     {1.058, 1.088, 1.022, 1.086, 0.967, 1.111},
    //     {1.164, 1.121, 1.061, 1.062, 1.047, 1.083},
    //     {1.118, 1.111, 1.142, 1.078, 1.065, 1.115},
    //     {1.314, 1.139, 1.212, 1.258, 1.085, 1.048}};

    // const float eff_corr_val_pip_20_40[MOM_BIN_SIZE_FDH_PIP - 1][FD_SEC] = {
    //     {0.837, 0.687, 0.831, 0.763, 0.597, 0.740},
    //     {0.846, 0.805, 0.861, 0.928, 0.734, 0.768},
    //     {0.821, 0.750, 0.717, 0.847, 0.786, 0.775},
    //     {0.867, 0.777, 0.775, 0.901, 0.909, 0.821},
    //     {0.889, 0.853, 0.794, 0.902, 0.988, 0.894},
    //     {1.008, 0.893, 0.856, 0.954, 0.898, 0.933},
    //     {1.025, 0.918, 0.877, 0.984, 0.957, 0.942},
    //     {0.950, 0.916, 1.044, 0.934, 0.996, 0.999},
    //     {0.912, 1.000, 0.932, 0.653, 0.959, 0.912},
    // };
    // const float eff_corr_val_pim_40_180[MOM_BIN_SIZE_CD_PIM - 1][CD_SEC] = {
    //     {0.664, 0.787, 0.658},
    //     {0.641, 0.750, 0.624},
    //     {0.653, 0.770, 0.634},
    //     {0.695, 0.829, 0.719},
    //     {0.710, 0.796, 0.723},
    //     {0.675, 0.761, 0.713},
    //     {0.690, 0.795, 0.728},
    //     {0.700, 0.813, 0.744},
    //     {0.692, 0.860, 0.775},
    //     {0.719, 0.832, 0.761},
    //     {0.596, 0.687, 0.677}};

    // const float eff_corr_val_pim_0_20[MOM_BIN_SIZE_FDL_PIM - 1][FD_SEC] = {
    //     {1.309, 1.359, 1.813, 1.840, 2.534, 2.109},
    //     {1.002, 1.066, 1.097, 0.970, 0.883, 0.775},
    //     {0.940, 0.958, 1.070, 1.020, 0.948, 0.872},
    //     {0.941, 0.929, 0.938, 1.007, 0.912, 0.925},
    //     {0.938, 1.142, 0.997, 0.972, 1.036, 0.913},
    //     {1.220, 1.036, 1.028, 1.013, 0.897, 1.085}};

    // const float eff_corr_val_pim_20_40[MOM_BIN_SIZE_FDH_PIM - 1][FD_SEC] = {
    //     {0.939, 0.955, 1.009, 1.134, 0.994, 1.026},
    //     {0.882, 0.917, 0.882, 0.872, 0.838, 0.859},
    //     {0.896, 0.902, 0.888, 0.874, 0.876, 0.860},
    //     {0.939, 0.918, 0.952, 0.888, 0.905, 0.890},
    //     {0.943, 0.954, 0.953, 0.972, 0.951, 0.917},
    //     {0.967, 0.982, 1.020, 0.947, 1.009, 0.962},
    //     {1.007, 1.029, 1.009, 0.995, 0.987, 1.031},
    //     {1.072, 0.990, 1.068, 1.084, 1.016, 1.058}};

public:
    EffCorr(){};
    ~EffCorr();

    float PROT_EFF_CORR_FACT(float mom_, float theta_, float phi_);
    float PIP_EFF_CORR_FACT(float mom_, float theta_, float phi_);
    float PIM_EFF_CORR_FACT(float mom_, float theta_, float phi_);

    float EFF_CORR_FACT(float mom_p, float theta_p, float phi_p, float mom_pip, float theta_pip, float phi_pip, float mom_pim, float theta_pim, float phi_pim);
    float EFF_CORR_FACT1(float mom_p, float theta_p, float phi_p, float mom_pip, float theta_pip, float phi_pip);
};

#endif